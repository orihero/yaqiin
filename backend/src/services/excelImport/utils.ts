import { ExcelProduct, CategoryWithAttributes } from './types';
import { DEFAULT_CONFIG } from './constants';

/**
 * Utility functions for Excel Import Service
 */

/**
 * Estimate token count for a given text (rough approximation)
 */
export function estimateTokenCount(text: string): number {
  return Math.ceil(text.length / DEFAULT_CONFIG.TOKEN_ESTIMATION_RATIO);
}

/**
 * Extract weight/quantity information from product name
 */
export function extractProductInfo(productName: string): { unit: string; quantity: number } {
  const weightMatch = productName.match(/(\d+(?:[,.]\d+)?)\s*(–∫–≥|kg|–≥|g|–ª|l|ml|–º–ª)/i);
  const quantityMatch = productName.match(/(\d+)\s*(—à—Ç|pcs|pack|box|bottle|can)/i);
  
  let detectedUnit = "pcs";
  let detectedQuantity = 1;
  
  if (weightMatch) {
    const weight = parseFloat(weightMatch[1].replace(',', '.'));
    const unit = weightMatch[2].toLowerCase();
    
    if (unit === '–∫–≥' || unit === 'kg') {
      detectedUnit = "kg";
      detectedQuantity = weight;
    } else if (unit === '–≥' || unit === 'g') {
      detectedUnit = "g";
      detectedQuantity = weight;
    } else if (unit === '–ª' || unit === 'l') {
      detectedUnit = "l";
      detectedQuantity = weight;
    } else if (unit === '–º–ª' || unit === 'ml') {
      detectedUnit = "ml";
      detectedQuantity = weight;
    }
  } else if (quantityMatch) {
    detectedQuantity = parseInt(quantityMatch[1]);
    const unit = quantityMatch[2].toLowerCase();
    
    if (unit === '—à—Ç' || unit === 'pcs') {
      detectedUnit = "pcs";
    } else if (unit === 'pack') {
      detectedUnit = "pack";
    } else if (unit === 'box') {
      detectedUnit = "box";
    } else if (unit === 'bottle') {
      detectedUnit = "bottle";
    } else if (unit === 'can') {
      detectedUnit = "can";
    }
  }

  return { unit: detectedUnit, quantity: detectedQuantity };
}

// Note: AI-based category optimization functions removed as we now use index-based category assignment

/**
 * Generate fallback Uzbek name from Russian name
 */
export function generateFallbackUzbekName(russianName: string): string {
  // Basic Russian to Uzbek translations for common words
  const translations: { [key: string]: string } = {
    '–ø–æ—Ä–æ—à–æ–∫': 'kukuni',
    '—Å—Ç–∏—Ä–∞–ª—å–Ω—ã–π': 'kir yuvish',
    '—Å—Ä–µ–¥—Å—Ç–≤–æ': 'vosita',
    '—á–∏—Å—Ç—è—â–µ–µ': 'tozalash',
    '—Å–≤–µ–∂–µ—Å—Ç—å': 'yangilik',
    '–æ—Ç': 'dan',
    '–¥–ª—è': 'uchun',
    '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π': 'professional',
    '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π': 'universal',
    '—Ü–≤–µ—Ç–Ω–æ–π': 'rangli',
    '–±–µ–ª—ã–π': 'oq',
    '–∞–≤—Ç–æ–º–∞—Ç': 'avtomat',
    '—Ä—É—á–Ω–∞—è': 'qo\'l',
    '—Å—Ç–∏—Ä–∫–∞': 'yuvish',
    '–ª–∞–≤–∞–Ω–¥–∞': 'lavanda',
    '—Ü–≤–µ—Ç': 'rang',
    '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª': 'professional'
  };

  let uzbekName = russianName;
  
  // Apply translations
  Object.entries(translations).forEach(([russian, uzbek]) => {
    const regex = new RegExp(russian, 'gi');
    uzbekName = uzbekName.replace(regex, uzbek);
  });

  // Keep numbers and units as they are
  return uzbekName;
}

/**
 * Generate fallback Russian description
 */
export function generateFallbackDescriptionRu(productName: string): string {
  if (productName.toLowerCase().includes('–ø–æ—Ä–æ—à–æ–∫')) {
    return `<h3>üßΩ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</h3>
<p><strong>${productName}</strong> - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –º–æ—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è —Å—Ç–∏—Ä–∫–∏ –±–µ–ª—å—è, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–µ–µ –≥–ª—É–±–æ–∫—É—é –æ—á–∏—Å—Ç–∫—É –∏ –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.</p>

<h3>‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</h3>
<ul>
<li>–ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–∫–∞–Ω–µ–π</li>
<li>–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–π–∫–∏—Ö –ø—è—Ç–µ–Ω</li>
<li>–°–≤–µ–∂–µ—Å—Ç—å –∏ –ø—Ä–∏—è—Ç–Ω—ã–π –∞—Ä–æ–º–∞—Ç</li>
<li>–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–∫–∞–Ω–µ–π</li>
<li>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö</li>
</ul>

<h3>üìã –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ</h3>
<p>–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç–∏—Ä–∫–∏ –±–µ–ª–æ–≥–æ –∏ —Ü–≤–µ—Ç–Ω–æ–≥–æ –±–µ–ª—å—è. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ –ø—Ä–∏ —Ä—É—á–Ω–æ–π, —Ç–∞–∫ –∏ –ø—Ä–∏ –º–∞—à–∏–Ω–Ω–æ–π —Å—Ç–∏—Ä–∫–µ.</p>

<h3>‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
<p>–•—Ä–∞–Ω–∏—Ç–µ –≤ —Å—É—Ö–æ–º –º–µ—Å—Ç–µ, –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –æ—Ç –ø—Ä—è–º—ã—Ö —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ª—É—á–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞–∏–ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.</p>`;
  }
  
  if (productName.toLowerCase().includes('—á–∏—Å—Ç—è—â')) {
    return `<h3>üßΩ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</h3>
<p><strong>${productName}</strong> - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å—Ç—è—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —É–±–æ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π.</p>

<h3>‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</h3>
<ul>
<li>–ú–æ—â–Ω–∞—è –æ—á–∏—â–∞—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å</li>
<li>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π –∏ –ø—è—Ç–µ–Ω</li>
<li>–î–µ–∑–∏–Ω—Ñ–∏—Ü–∏—Ä—É—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞</li>
<li>–ü—Ä–∏—è—Ç–Ω—ã–π –∞—Ä–æ–º–∞—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</li>
<li>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π</li>
</ul>

<h3>üìã –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ</h3>
<p>–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—É—Ö–æ–Ω–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π, –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç, —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏ –∏ –¥—Ä—É–≥–∏—Ö –±—ã—Ç–æ–≤—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∂–∏—Ä–æ–º, –Ω–∞–∫–∏–ø—å—é –∏ –¥—Ä—É–≥–∏–º–∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è–º–∏.</p>

<h3>‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
<p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–µ–º—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏—è—Ö. –ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –≥–ª–∞–∑–∞–º–∏ –∏ –∫–æ–∂–µ–π. –•—Ä–∞–Ω–∏—Ç–µ –≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º –¥–ª—è –¥–µ—Ç–µ–π –º–µ—Å—Ç–µ.</p>`;
  }
  
  return `<h3>üì¶ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</h3>
<p><strong>${productName}</strong> - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –±—ã—Ç–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–¥–æ–±—Å—Ç–≤–æ –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏.</p>

<h3>‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</h3>
<ul>
<li>–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</li>
<li>–£–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</li>
<li>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å</li>
<li>–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è</li>
</ul>

<h3>üìã –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ</h3>
<p>–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</p>

<h3>‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
<p>–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞–∏–ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –•—Ä–∞–Ω–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.</p>`;
}

/**
 * Generate fallback Uzbek description
 */
export function generateFallbackDescriptionUz(productName: string): string {
  if (productName.toLowerCase().includes('–ø–æ—Ä–æ—à–æ–∫')) {
    return `<h3>üßΩ Mahsulot tavsifi</h3>
<p><strong>${productName}</strong> - kir yuvish uchun samarali yuvish vositasidir, chuqur tozalash va ajoyib natijalarni ta'minlaydi.</p>

<h3>‚ú® Asosiy afzalliklar</h3>
<ul>
<li>Mato turlarini chuqur tozalash</li>
<li>Qattiq dog'larni ketkazish</li>
<li>Yangilik va yoqimli hid</li>
<li>Turli xil mato turlari uchun mos</li>
<li>Turli harorat rejimlarida samarali</li>
</ul>

<h3>üìã Qo'llash</h3>
<p>Oq va rangli kirlarni yuvish uchun ideal. Qo'lda va mashinada yuvishda ham ajoyib natijalar beradi.</p>

<h3>‚ö†Ô∏è Tavsiyalar</h3>
<p>To'g'ridan-to'g'ri quyosh nurlaridan himoyalangan quruq joyda saqlang. Eng yaxshi natijalar uchun qadoqdagi ko'rsatmalarga amal qiling.</p>`;
  }
  
  if (productName.toLowerCase().includes('—á–∏—Å—Ç—è—â')) {
    return `<h3>üßΩ Mahsulot tavsifi</h3>
<p><strong>${productName}</strong> - turli sirtlarni samarali tozalash uchun professional tozalash vositasidir.</p>

<h3>‚ú® Asosiy afzalliklar</h3>
<ul>
<li>Kuchli tozalash qobiliyati</li>
<li>Ifloslanish va dog'larni ketkazish</li>
<li>Dezinfektsiya xususiyatlari</li>
<li>Foydalanishdan keyin yoqimli hid</li>
<li>Turli sirt turlari uchun xavfsiz</li>
</ul>

<h3>üìã Qo'llash</h3>
<p>Oshxona sirtlari, hammom xonalari, sanitariya jihozlari va boshqa maishiy sirtlarni tozalash uchun mos. Yog', qotish va boshqa ifloslanishlar bilan samarali kurashadi.</p>

<h3>‚ö†Ô∏è Tavsiyalar</h3>
<p>Yaxshi shamollatiladigan joylarda ishlating. Ko'z va teri bilan aloqa qilishdan saqlaning. Bolalar qo'li yetmas joyda saqlang.</p>`;
  }
  
  return `<h3>üì¶ Mahsulot tavsifi</h3>
<p><strong>${productName}</strong> - maishiy foydalanish uchun sifatli mahsulot, ajoyib natijalar va qo'llashda qulaylikni ta'minlaydi.</p>

<h3>‚ú® Asosiy afzalliklar</h3>
<ul>
<li>Yuqori sifat</li>
<li>Foydalanish qulayligi</li>
<li>Ishonchlilik</li>
<li>Kundalik foydalanish uchun mos</li>
</ul>

<h3>üìã Qo'llash</h3>
<p>Uy sharoitida kundalik foydalanish uchun ideal. Barqaror natijalar beradi va foydalanuvchilar ehtiyojlarini qondiradi.</p>

<h3>‚ö†Ô∏è Tavsiyalar</h3>
<p>Eng yaxshi natijalar uchun foydalanish bo'yicha ko'rsatmalarga amal qiling. Ishlab chiqaruvchi tavsiyalariga muvofiq saqlang.</p>`;
}

/**
 * Detect unit from product name
 */
export function detectUnitFromName(productName: string): string {
  const nameLower = productName.toLowerCase();
  
  if (nameLower.includes('–∫–≥') || nameLower.includes('kg')) {
    return 'kg';
  }
  if (nameLower.includes('–≥') || nameLower.includes('g')) {
    return 'g';
  }
  if (nameLower.includes('–ª') || nameLower.includes('l')) {
    return 'l';
  }
  if (nameLower.includes('–º–ª') || nameLower.includes('ml')) {
    return 'ml';
  }
  if (nameLower.includes('—à—Ç') || nameLower.includes('pcs')) {
    return 'pcs';
  }
  if (nameLower.includes('pack')) {
    return 'pack';
  }
  if (nameLower.includes('box')) {
    return 'box';
  }
  if (nameLower.includes('bottle')) {
    return 'bottle';
  }
  if (nameLower.includes('can')) {
    return 'can';
  }
  
  return 'pcs'; // default
}

/**
 * Get optimal thread count based on system capabilities
 */
export function getOptimalThreadCount(): number {
  try {
    // Get CPU core count
    const cpuCount = require('os').cpus().length;
    console.log(`üíª System has ${cpuCount} CPU cores`);
    
    // Calculate optimal thread count
    // Use CPU cores as base, but cap at reasonable limits for I/O bound tasks
    let optimalCount = cpuCount;
    
    // For I/O bound tasks like AI API calls and database operations,
    // we can use more threads than CPU cores
    optimalCount = Math.min(optimalCount * 2, DEFAULT_CONFIG.MAX_THREADS);
    optimalCount = Math.max(optimalCount, DEFAULT_CONFIG.MIN_THREADS);
    
    console.log(`üßµ Optimal thread count calculated: ${optimalCount} (based on ${cpuCount} CPU cores)`);
    return optimalCount;
  } catch (error) {
    console.warn(`‚ö†Ô∏è Could not detect CPU cores, using default thread count: 4`);
    return 4; // Fallback to 4 threads
  }
}

/**
 * Clean and parse AI response JSON
 */
export function cleanAndParseAIResponse(response: string): any {
  // Clean the response to handle common JSON issues
  let cleanedResponse = response.trim();

  // Remove any markdown code blocks if present
  if (cleanedResponse.startsWith("```json")) {
    cleanedResponse = cleanedResponse
      .replace(/^```json\s*/, "")
      .replace(/\s*```$/, "");
  }
  if (cleanedResponse.startsWith("```")) {
    cleanedResponse = cleanedResponse
      .replace(/^```\s*/, "")
      .replace(/\s*```$/, "");
  }

  // Fix common JSON escaping issues
  cleanedResponse = cleanedResponse
    .replace(/(?<!\\)'/g, "\\'") // Escape unescaped single quotes
    .replace(/(?<!\\)"/g, '\\"') // Escape unescaped double quotes
    .replace(/\\'/g, "'") // Convert escaped single quotes back to regular
    .replace(/\\"/g, '"'); // Convert escaped double quotes back to regular

  return JSON.parse(cleanedResponse);
}
