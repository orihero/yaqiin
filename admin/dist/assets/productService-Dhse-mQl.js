import{a as t}from"./api-DwbFXHRK.js";const i=async(e=1,r=10,s="")=>{const a=new URLSearchParams({page:String(e),limit:String(r)});return s&&a.append("search",s),(await t.get(`/products?${a.toString()}`)).data},c=async e=>{let r;if(e.images&&e.images.length>0){const a=new FormData;a.append("name",JSON.stringify(e.name)),a.append("description",JSON.stringify(e.description)),a.append("categoryId",e.categoryId),a.append("basePrice",String(e.basePrice)),a.append("unit",e.unit),e.unitMeasure&&a.append("unitMeasure",e.unitMeasure),a.append("baseStock",JSON.stringify(e.baseStock)),a.append("isActive",String(e.isActive)),e.images.forEach(d=>a.append("images",d)),e.imageUrls&&e.imageUrls.length>0&&a.append("imageUrls",JSON.stringify(e.imageUrls)),r=a}else r={...e,imageUrls:e.imageUrls&&e.imageUrls.length>0?e.imageUrls:void 0};const s=await t.post("/products",r,{headers:r instanceof FormData?{"Content-Type":"multipart/form-data"}:void 0});if(!s.data.success)throw new Error(s.data?.error?.message||"Failed to create product");return s.data.data},n=async e=>{let r;if(e.images&&e.images.length>0){const a=new FormData;a.append("name",JSON.stringify(e.name)),a.append("description",JSON.stringify(e.description)),a.append("categoryId",e.categoryId),a.append("basePrice",String(e.basePrice)),a.append("unit",e.unit),e.unitMeasure&&a.append("unitMeasure",e.unitMeasure),a.append("baseStock",JSON.stringify(e.baseStock)),a.append("isActive",String(e.isActive)),e.images.forEach(d=>a.append("images",d)),e.imageUrls&&e.imageUrls.length>0&&a.append("imageUrls",JSON.stringify(e.imageUrls)),r=a}else r={...e,imageUrls:e.imageUrls&&e.imageUrls.length>0?e.imageUrls:void 0};const s=await t.put(`/products/${e._id}`,r,{headers:r instanceof FormData?{"Content-Type":"multipart/form-data"}:void 0});if(!s.data.success)throw new Error(s.data?.error?.message||"Failed to update product");return s.data.data},g=async e=>{const r=await t.delete(`/products/${e}`);if(!r.data.success)throw new Error(r.data?.error?.message||"Failed to delete product");return r.data.data},m=async e=>{const r=await t.delete("/products/bulk",{data:{productIds:e}});if(!r.data.success)throw new Error(r.data?.error?.message||"Failed to delete products");return r.data.data};export{m as b,c,g as d,i as g,n as u};
